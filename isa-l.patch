diff --git a/WORKSPACE b/WORKSPACE
index a96cba501..f75aa0ed8 100644
--- a/WORKSPACE
+++ b/WORKSPACE
@@ -19,3 +19,9 @@ envoy_dependencies_extra()
 load("//bazel:dependency_imports.bzl", "envoy_dependency_imports")
 
 envoy_dependency_imports()
+
+new_local_repository(
+    name = "isa_l",
+    path = "/usr/lib/",
+    build_file = "bazel/isa_l.BUILD"
+)
\ No newline at end of file
diff --git a/bazel/isa_l.BUILD b/bazel/isa_l.BUILD
new file mode 100644
index 000000000..f9bc432db
--- /dev/null
+++ b/bazel/isa_l.BUILD
@@ -0,0 +1,7 @@
+load("@rules_cc//cc:defs.bzl", "cc_library")
+
+cc_library(
+   name = "lib",
+   srcs = ["libisal.a"],
+   visibility = ["//visibility:public"],
+)
\ No newline at end of file
diff --git a/source/extensions/compression/gzip/common/base.cc b/source/extensions/compression/gzip/common/base.cc
index 0e956c182..2ce67750f 100644
--- a/source/extensions/compression/gzip/common/base.cc
+++ b/source/extensions/compression/gzip/common/base.cc
@@ -3,11 +3,11 @@
 namespace Envoy {
 namespace Zlib {
 
-Base::Base(uint64_t chunk_size, std::function<void(z_stream*)> zstream_deleter)
+Base::Base(uint64_t chunk_size)
     : chunk_size_{chunk_size}, chunk_char_ptr_(new unsigned char[chunk_size]),
-      zstream_ptr_(new z_stream(), zstream_deleter) {}
+      zstream_ptr_(new isal_zstream()) {}
 
-uint64_t Base::checksum() { return zstream_ptr_->adler; }
+uint64_t Base::checksum() { return zstream_ptr_->internal_state.crc; }
 
 void Base::updateOutput(Buffer::Instance& output_buffer) {
   const uint64_t n_output = chunk_size_ - zstream_ptr_->avail_out;
diff --git a/source/extensions/compression/gzip/common/base.h b/source/extensions/compression/gzip/common/base.h
index f8b89cb25..d147a565b 100644
--- a/source/extensions/compression/gzip/common/base.h
+++ b/source/extensions/compression/gzip/common/base.h
@@ -4,7 +4,7 @@
 
 #include "envoy/buffer/buffer.h"
 
-#include "zlib.h"
+#include <isa-l/igzip_lib.h>
 
 namespace Envoy {
 namespace Zlib {
@@ -15,7 +15,7 @@ namespace Zlib {
 // TODO(junr03): move to extensions tree once the compressor side is moved to extensions.
 class Base {
 public:
-  Base(uint64_t chunk_size, std::function<void(z_stream*)> zstream_deleter);
+  Base(uint64_t chunk_size);
 
   /**
    * It returns the checksum of all output produced so far. Compressor's checksum at the end of
@@ -34,7 +34,7 @@ protected:
   bool initialized_{false};
 
   const std::unique_ptr<unsigned char[]> chunk_char_ptr_;
-  const std::unique_ptr<z_stream, std::function<void(z_stream*)>> zstream_ptr_;
+  const std::unique_ptr<isal_zstream> zstream_ptr_;
 };
 
 } // namespace Zlib
diff --git a/source/extensions/compression/gzip/compressor/BUILD b/source/extensions/compression/gzip/compressor/BUILD
index c138afe6a..066d66441 100644
--- a/source/extensions/compression/gzip/compressor/BUILD
+++ b/source/extensions/compression/gzip/compressor/BUILD
@@ -19,6 +19,7 @@ envoy_cc_library(
         "//source/common/buffer:buffer_lib",
         "//source/common/common:assert_lib",
         "//source/extensions/compression/gzip/common:zlib_base_lib",
+        "@isa_l//:lib",
     ],
 )
 
diff --git a/source/extensions/compression/gzip/compressor/zlib_compressor_impl.cc b/source/extensions/compression/gzip/compressor/zlib_compressor_impl.cc
index 9cde79fad..356a2ff0b 100644
--- a/source/extensions/compression/gzip/compressor/zlib_compressor_impl.cc
+++ b/source/extensions/compression/gzip/compressor/zlib_compressor_impl.cc
@@ -14,26 +14,41 @@ namespace Compression {
 namespace Gzip {
 namespace Compressor {
 
-ZlibCompressorImpl::ZlibCompressorImpl() : ZlibCompressorImpl(4096) {}
+ZlibCompressorImpl::ZlibCompressorImpl() : ZlibCompressorImpl(4096) {printf("22222222");}
 
 ZlibCompressorImpl::ZlibCompressorImpl(uint64_t chunk_size)
-    : Zlib::Base(chunk_size, [](z_stream* z) {
-        deflateEnd(z);
-        delete z;
-      }) {
-  zstream_ptr_->zalloc = Z_NULL;
-  zstream_ptr_->zfree = Z_NULL;
-  zstream_ptr_->opaque = Z_NULL;
-  zstream_ptr_->avail_out = chunk_size_;
-  zstream_ptr_->next_out = chunk_char_ptr_.get();
-}
+    : Zlib::Base(chunk_size) {}
 
 void ZlibCompressorImpl::init(CompressionLevel comp_level, CompressionStrategy comp_strategy,
                               int64_t window_bits, uint64_t memory_level = 8) {
   ASSERT(initialized_ == false);
-  const int result = deflateInit2(zstream_ptr_.get(), static_cast<int64_t>(comp_level), Z_DEFLATED,
-                                  window_bits, memory_level, static_cast<uint64_t>(comp_strategy));
-  RELEASE_ASSERT(result >= 0, "");
+  // const int result = deflateInit2(zstream_ptr_.get(), static_cast<int64_t>(comp_level), Z_DEFLATED,
+  //                                 window_bits, memory_level, static_cast<uint64_t>(comp_strategy));
+  // RELEASE_ASSERT(result >= 0, "");
+  (void)comp_strategy;
+  (void)window_bits;
+  (void)memory_level;
+  isal_deflate_init(zstream_ptr_.get());
+  zstream_ptr_->avail_out = chunk_size_;
+  zstream_ptr_->next_out = chunk_char_ptr_.get();
+  auto level = static_cast<int64_t>(comp_level);
+  if (level == 1) {
+		zstream_ptr_->level = 1;
+		zstream_ptr_->level_buf = static_cast<uint8_t *>(malloc(ISAL_DEF_LVL1_DEFAULT));
+		zstream_ptr_->level_buf_size = ISAL_DEF_LVL1_DEFAULT;
+	}else if (level == 2) {
+		zstream_ptr_->level = 2;
+		zstream_ptr_->level_buf = static_cast<uint8_t *>(malloc(ISAL_DEF_LVL2_DEFAULT));
+		zstream_ptr_->level_buf_size = ISAL_DEF_LVL2_DEFAULT;		
+  }else if (level == 3) {
+		zstream_ptr_->level = 3;
+		zstream_ptr_->level_buf = static_cast<uint8_t *>(malloc(ISAL_DEF_LVL3_DEFAULT));
+		zstream_ptr_->level_buf_size = ISAL_DEF_LVL3_DEFAULT;		
+	}
+  if (zstream_ptr_->level_buf == 0) {
+			printf("Failed to allocate level compression buffer\n");
+			exit(0);
+	}
   initialized_ = true;
 }
 
@@ -41,45 +56,45 @@ void ZlibCompressorImpl::compress(Buffer::Instance& buffer,
                                   Envoy::Compression::Compressor::State state) {
   for (const Buffer::RawSlice& input_slice : buffer.getRawSlices()) {
     zstream_ptr_->avail_in = input_slice.len_;
-    zstream_ptr_->next_in = static_cast<Bytef*>(input_slice.mem_);
+    zstream_ptr_->next_in = static_cast<uint8_t*>(input_slice.mem_);
     // Z_NO_FLUSH tells the compressor to take the data in and compresses it as much as possible
     // without flushing it out. However, if the data output is greater or equal to the allocated
     // chunk size, process() outputs it to the end of the buffer. This is fine, since at the next
     // step, the buffer is drained from the beginning of the buffer by the size of input.
-    process(buffer, Z_NO_FLUSH);
+    process(buffer, NO_FLUSH);
     buffer.drain(input_slice.len_);
   }
 
-  process(buffer, state == Envoy::Compression::Compressor::State::Finish ? Z_FINISH : Z_SYNC_FLUSH);
+  process(buffer, state == Envoy::Compression::Compressor::State::Finish ? FULL_FLUSH : SYNC_FLUSH);
 }
 
 bool ZlibCompressorImpl::deflateNext(int64_t flush_state) {
-  const int result = deflate(zstream_ptr_.get(), flush_state);
+  const int result = isal_deflate(zstream_ptr_.get());
   switch (flush_state) {
-  case Z_FINISH:
-    if (result != Z_OK && result != Z_BUF_ERROR) {
-      RELEASE_ASSERT(result == Z_STREAM_END, "");
+  case FULL_FLUSH:
+    if (result == ISAL_INVALID_LEVEL_BUF && result != COMP_OK) {
       return false;
     }
-    FALLTHRU;
+    return false;
   default:
-    if (result == Z_BUF_ERROR && zstream_ptr_->avail_in == 0) {
+    if (result == ISAL_INVALID_LEVEL_BUF && zstream_ptr_->avail_in == 0) {
       return false; // This means that zlib needs more input, so stop here.
     }
-    RELEASE_ASSERT(result == Z_OK, "");
+    RELEASE_ASSERT(result == COMP_OK, "");
   }
 
   return true;
 }
 
 void ZlibCompressorImpl::process(Buffer::Instance& output_buffer, int64_t flush_state) {
+  zstream_ptr_->end_of_stream = flush_state == FULL_FLUSH?1:0;
   while (deflateNext(flush_state)) {
     if (zstream_ptr_->avail_out == 0) {
       updateOutput(output_buffer);
     }
   }
 
-  if (flush_state == Z_SYNC_FLUSH || flush_state == Z_FINISH) {
+  if (flush_state == SYNC_FLUSH || flush_state == FULL_FLUSH) {
     updateOutput(output_buffer);
   }
 }
diff --git a/source/extensions/compression/gzip/compressor/zlib_compressor_impl.h b/source/extensions/compression/gzip/compressor/zlib_compressor_impl.h
index 0bb86a46e..ff35b8d4b 100644
--- a/source/extensions/compression/gzip/compressor/zlib_compressor_impl.h
+++ b/source/extensions/compression/gzip/compressor/zlib_compressor_impl.h
@@ -4,6 +4,8 @@
 
 #include "source/extensions/compression/gzip/common/base.h"
 
+#include <isa-l/igzip_lib.h>
+
 #include "zlib.h"
 
 namespace Envoy {
@@ -39,18 +41,18 @@ public:
    * manual.
    */
   enum class CompressionLevel : int64_t {
-    Best = Z_BEST_COMPRESSION,
+    Best = 3,
     Level1 = 1,
     Level2 = 2,
     Level3 = 3,
-    Level4 = 4,
-    Level5 = 5,
-    Level6 = 6,
-    Level7 = 7,
-    Level8 = 8,
-    Level9 = 9,
-    Speed = Z_BEST_SPEED,
-    Standard = Z_DEFAULT_COMPRESSION,
+    Level4 = 3,
+    Level5 = 3,
+    Level6 = 3,
+    Level7 = 3,
+    Level8 = 3,
+    Level9 = 3,
+    Speed = 1,
+    Standard = 2,
   };
 
   /**
diff --git a/source/extensions/compression/gzip/decompressor/BUILD b/source/extensions/compression/gzip/decompressor/BUILD
deleted file mode 100644
index 13939fdcb..000000000
--- a/source/extensions/compression/gzip/decompressor/BUILD
+++ /dev/null
@@ -1,38 +0,0 @@
-load(
-    "//bazel:envoy_build_system.bzl",
-    "envoy_cc_extension",
-    "envoy_cc_library",
-    "envoy_extension_package",
-)
-
-licenses(["notice"])  # Apache 2
-
-envoy_extension_package()
-
-envoy_cc_library(
-    name = "zlib_decompressor_impl_lib",
-    srcs = ["zlib_decompressor_impl.cc"],
-    hdrs = ["zlib_decompressor_impl.h"],
-    external_deps = ["zlib"],
-    deps = [
-        "//envoy/compression/decompressor:decompressor_interface",
-        "//envoy/stats:stats_interface",
-        "//envoy/stats:stats_macros",
-        "//source/common/buffer:buffer_lib",
-        "//source/common/common:assert_lib",
-        "//source/common/common:minimal_logger_lib",
-        "//source/extensions/compression/gzip/common:zlib_base_lib",
-    ],
-)
-
-envoy_cc_extension(
-    name = "config",
-    srcs = ["config.cc"],
-    hdrs = ["config.h"],
-    deps = [
-        ":zlib_decompressor_impl_lib",
-        "//source/common/http:headers_lib",
-        "//source/extensions/compression/common/decompressor:decompressor_factory_base_lib",
-        "@envoy_api//envoy/extensions/compression/gzip/decompressor/v3:pkg_cc_proto",
-    ],
-)
diff --git a/source/extensions/extensions_build_config.bzl b/source/extensions/extensions_build_config.bzl
index 068f98e63..1a05950ce 100644
--- a/source/extensions/extensions_build_config.bzl
+++ b/source/extensions/extensions_build_config.bzl
@@ -25,7 +25,7 @@ EXTENSIONS = {
     #
 
     "envoy.compression.gzip.compressor":                "//source/extensions/compression/gzip/compressor:config",
-    "envoy.compression.gzip.decompressor":              "//source/extensions/compression/gzip/decompressor:config",
+    #"envoy.compression.gzip.decompressor":              "//source/extensions/compression/gzip/decompressor:config",
     "envoy.compression.brotli.compressor":              "//source/extensions/compression/brotli/compressor:config",
     "envoy.compression.brotli.decompressor":            "//source/extensions/compression/brotli/decompressor:config",
 
diff --git a/test/extensions/filters/http/compressor/compressor_filter_speed_test.cc b/test/extensions/filters/http/compressor/compressor_filter_speed_test.cc
index a23468b20..460b59e85 100644
--- a/test/extensions/filters/http/compressor/compressor_filter_speed_test.cc
+++ b/test/extensions/filters/http/compressor/compressor_filter_speed_test.cc
@@ -3,6 +3,7 @@
 
 #include "source/extensions/compression/gzip/compressor/zlib_compressor_impl.h"
 #include "source/extensions/filters/http/compressor/compressor_filter.h"
+#include "source/common/common/logger.h"
 
 #include "test/mocks/http/mocks.h"
 #include "test/mocks/runtime/mocks.h"
@@ -30,6 +31,7 @@ public:
   Envoy::Compression::Compressor::CompressorPtr createCompressor() override {
     auto compressor = std::make_unique<Compression::Gzip::Compressor::ZlibCompressorImpl>();
     compressor->init(level_, strategy_, window_bits_, memory_level_);
+    printf("22222222222");
     return compressor;
   }
 
@@ -66,7 +68,7 @@ static std::vector<Buffer::OwnedImpl> generateChunks(const uint64_t chunk_count,
                                                      const uint64_t chunk_size) {
   std::vector<Buffer::OwnedImpl> vec;
   vec.reserve(chunk_count);
-
+  printf("22222222222");
   const auto& test_data = testData();
   uint64_t added = 0;
 
@@ -96,7 +98,7 @@ static Result compressWith(std::vector<Buffer::OwnedImpl>&& chunks, CompressionP
   Stats::IsolatedStoreImpl stats;
   testing::NiceMock<Runtime::MockLoader> runtime;
   envoy::extensions::filters::http::compressor::v3::Compressor compressor;
-
+  
   const auto level = std::get<0>(params);
   const auto strategy = std::get<1>(params);
   const auto window_bits = std::get<2>(params);
@@ -233,7 +235,7 @@ static void compressFull(benchmark::State& state) {
   NiceMock<Http::MockStreamDecoderFilterCallbacks> decoder_callbacks;
   const auto idx = state.range(0);
   const auto& params = compression_params[idx];
-
+  printf("111111111111");
   for (auto _ : state) {
     std::vector<Buffer::OwnedImpl> chunks = generateChunks(1, 122880);
     compressWith(std::move(chunks), params, decoder_callbacks, state);
